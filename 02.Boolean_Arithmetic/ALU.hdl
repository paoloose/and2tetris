// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs,
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN
        x[16], y[16],  // 16-bit inputs
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // Applying zx
    Mux16(a=x, b[0..15]=false, sel=zx, out=x1);

    // Applying nx
    // I'd rather use a Xor16 here, but the guide recommend to only use the
    // provided chips as possible
    Not16(in=x1, out=NOTx1);
    Mux16(a=x1, b=NOTx1, sel=nx, out=x2);

    // Applying zy
    Mux16(a=y, b[0..15]=false, sel=zy, out=y1);

    // Applying ny
    Not16(in=y1, out=NOTy1);
    Mux16(a=y1, b=NOTy1, sel=ny, out=y2);

    // Deciding between addition and bitwise and
    And16(a=x2, b=y2, out=xANDy);
    Add16(a=x2, b=y2, out=xADDy);
    Mux16(a=xANDy, b=xADDy, sel=f, out=computation);

    // Deciding between negation and not
    Not16(in=computation, out=NOTcomputation);
    Mux16(
        a=computation,
        b=NOTcomputation,
        sel=no,
        out=out,
        out=pipedOut, // Save for the zr
        out[15]=ng // The most significant bit is the negative flag on two's complement
    );

    // Note: I implement a custom Or16Way chip here to simplify the code.
    //       If you don't want to create new chips, then in the Mux16 save
    //       the 'out[0..7]=' and 'out[8..15]=' and use a Or8Way on them
    Or16Way(in=pipedOut, out=NOTzr);
    Not(in=NOTzr, out=zr);
}
